


































































































[{"categories":["AI"],"contents":"The opening scene from Terminator 2 takes place on July 11, 2029. It‚Äôs eerily close to when I expect several Attack-focused AIs to be operational and effective (maybe even earlier?).\nThey lived only to face a new nightmare, the war against the Machines‚Ä¶\nBug bounty and pentest vendors are currently training AI models using all of the exploitation tricks sent through them. We can assume nation states and organised crime are doing the same thing. Their capability will come down to the efficacy of the models and the quality of data used to train them.\nMy opinion is that bug bounty vendors will have an edge here, and be able to offer both an AI Attack product and an AI Defence product. The sheer numbers and diversity of talent enrolled in bug bounty programs likely surpasses most individual pentest vendors and nation states. Of course, existing XDR and network products are also training, but they will find it much harder to sort the chaff from the wheat. They have a lot of normal data to go through before finding and labeling the attacks.\nThankfully Terminator 2 got one thing wrong: it won‚Äôt be us fighting the machines, it‚Äôll be our own labeled, trained-with-attacks AI Defence.\n","image":"/images/post/terminator-2_hu9736696281956540164.webp","permalink":"http://localhost:1313/post/ai-attack-bots-are-coming/","tags":null,"title":"AI Attack Bots are Coming"},{"categories":["ssdlc","MITRE ATT\u0026CK","appsec"],"contents":"There is one area of information security that is conspicuously absent from ATT\u0026amp;CK.\nIf your tooling only applies the detections and mitigations from ATT\u0026amp;CK, then you‚Äôre missing out on some critical security telemetry. More importantly, you will be lacking visibility over critical attacks against your organisation.\nSo what‚Äôs still hidden in the fog of war?\nApplication Security!\nMITRE have the whole gamut of appsec issues categorised under a single technique T1190 ‚ÄúExploit Public-Facing Application‚Äù. They simply point readers to the OWASP top 10 and the CWE top 25 for more information.\nMost monitoring tools focus on system or network attacks but lack visibility and response for applications. There really is no substitute for good preventative application security practices, built in to the SDLC.\n","image":"/images/post/mitre-attack-fog-of-war_hu18286329285542835308.webp","permalink":"http://localhost:1313/post/mitre-attack-blind-spots/","tags":null,"title":"MITRE ATT\u0026CK blind spots"},{"categories":["ssdlc","attack modeling","attack library"],"contents":"At it‚Äôs core, an Attack Library is a list of all possible attacks against a component of your design. We use it almost like a checklist when Attack Modeling, to determine which attacks are going to be attempted against the application or system.\nSee if you can guess which application feature this Attack Library is for:\nAttack Description Malware upload Attacker uploads file that contains malware, which could compromise the file parser or users who download or execute the file Web shell upload Attacker uploads web shell, which is exposed by the web server and runs in the service account\u0026rsquo;s context Server side request forgery (SSRF) Attacker uploads a file that makes a request to internal resources and exposes them Exploit parser weakness Attacker uploads a large, malformed or zip-bombed file that causes a denial of service File descriptor exhaustion Attacker uploads many files, which exhausts the available file descriptors and causes a denial of service Directory traversal Attacker exploits a path issue to upload malware outside of web root Override web server config Attacker uploads a web server configuration file that is used instead of the correct file Bypass Content-Type validation Attacker changes MIME type to bypass filters and upload malware Access plaintext file Attacker with file system privileges accesses unencrypted, sensitive file Unauthorised access to file Attacker exploits weak access controls to access another user\u0026rsquo;s file Stored XSS Attacker exploits output encoding issue to execute malicious script embedded in the file HTML injection Attacker exploits output encoding issue to execute HTML embedded in the file Unauthorised upload Attacker without permissions uploads a file XML External Entity (XXE) injection Attacker uploads XML file that references and leaks internal files Command injection Attacker exploits file handling to run system commands on the server SQL injection Attacker exploits database that the file might be stored in If you said File Upload, you\u0026rsquo;re correct! Did I miss any file upload attacks? Let me know.\nUsing an Attack Library is one of the things that saves the most time when Attack Modeling, and is the key difference when we compare Attack Modeling to Threat Modeling. Each component of a design has an associated Attack Library.\n\u0026ldquo;Success depends upon previous preparation, and without such preparation, there is sure to be failure.\u0026rdquo; ‚Äî Confucius\nThere are other uses for Attack Libraries too: when pentesting, it\u0026rsquo;s helpful to have at the front of your mind which types of attacks you might want to try against a components of an app or system. Having an Attack Library handy for the relevant features allows you to rely less on memory and more on preparation.\nOnce you have an Attack Library that includes each component of your application, network or other system, they are completely reusable for your next project. Feel free to borrow the one in this post for your own file upload feature.\n","image":"/images/post/missiles_hu1554792895470423165.webp","permalink":"http://localhost:1313/post/what-is-an-attack-library/","tags":null,"title":"What is an Attack Library?"},{"categories":["ssdlc","governance"],"contents":"Everyone? I\u0026rsquo;m not so sure\u0026hellip;\nImagine the early 2000s\u0026hellip; Britney Spears is playing on the radio, the waterfall model is de rigueur, pentesting is not a career choice, OWASP was in its nascent stages.\nThis is the era when threat modeling became popular and brought with it a sense of security - a way in which software engineers could gain some level of control over security by putting in the work to understand the threats to their product, before touching the code. Appsec was a mystical art known by few, and they could not do all of it themselves; they needed the software engineers to step up and learn security.\nFast forward to now, we have a USD $200 billion cyber security industry with millions of people involved in hundreds of niches. Every tech company over about 50 staff has as least 1 security hire, and large companies have an army of SOC analysts, appsec, GRC, perhaps even an offsec function.\nThe long-standing dogma is that everyone is responsible for security. In appsec, that means security champions should bear the weight of ensuring their engineering team builds secure software. In the past, I can understand the need for everyone to add security to their skill set. But now?\nAll crafts, trades and arts have profited from the division of labour; for when each worker sticks to one particular kind of work that needs to be handled differently from all the others, he can do it better and more easily than when one person does everything. Where work is not thus differentiated and divided, where everyone is a jack-of-all-trades, the crafts remain at an utterly primitive level. -Immanuel Kant\nSecurity champions are usually software engineers wearing a security hat. They might have done a half day course or online training on OWASP top 10, if they\u0026rsquo;re lucky. Often it\u0026rsquo;s just an arbitrary software engineer selected by their manager. Although software engineers and TPMs could no doubt learn all the ins and outs of cyber security, why should they be burdened with it?\nWe have a huge number of specialist security people who could do attack modeling more efficiently. Appsec folks will understand potential attack vectors as well as the business context of the application and how it fits in to the big picture. Automation and DevSecOps has gone some way to allieviating this issue but there are still a few manual steps holding out.\nSoftware engineers at startups and small companies obviously have to do double or triple duty. But large companies? They should understand that by loading up software engineers with security work like attack modeling, they are introducing inefficiencies, and would be better off hiring more security people.\n","image":"/images/post/large-group-people_hu16894424586448229030.webp","permalink":"http://localhost:1313/post/who-is-responsible-for-security/","tags":null,"title":"Who is responsible for security?"},{"categories":["ssdlc","attack modeling"],"contents":"This Attack Model maps potential attack vectors in a typical forgotten password system. The goal is to catalogue exploitable attack vectors along with the related security controls.\nThe output from an Attack Modeling exercise is a single table with two columns, called the Attack Register.\nAttack Surface Analysis Sequence of events Let\u0026rsquo;s take a look at a sequence diagram for a forgotten password system. This is the kind of doc that the engineering team should have on hand üòÖ . If not in official documentation, a photo of a whiteboard will often do.\nWe can infer from this diagram that there is a trust boundary between user, App API, IdP and Email Service. We know the assets already, because they\u0026rsquo;re stated in the diagram\u0026rsquo;s actions. We know the entry and exit points because the data flows are included, and local OS or network layer access is a given.\nThere\u0026rsquo;s no need to document assets, entry/exit points, trust boundaries - it should be obvious from the diagram and convention.\nThe Attack Library One of the key ways in which Attack Modeling differs from Threat Modeling is that we use a library of attacks and select which ones are relevant to the component we\u0026rsquo;re analysing. The reality is that there are few novel attack vectors, and we can get 99% of the way to a secure product by ensuring that it\u0026rsquo;s protected from known attacks.\nAlmost all web APIs play by the same rules and have similar attack vectors. Obviously there are outliers, but for the most part they all use HTTP and JSON, they all have a client and a server, there\u0026rsquo;s authentication, there\u0026rsquo;s forms to submit. The attack vectors are very transferable between products.\nThat means we can use a library of attacks and apply them to the problem. For application layer attacks, an easy one that everyone can access is included in Burp Suite. But you could construct your own library from wherever you like. It could be from past pentests, MITRE ATT\u0026amp;CK, or your favourite LLM. If you\u0026rsquo;ve done any amount of pentesting, you probably have a memorised attack library of hundreds of attacks.\nBurp Suite\u0026rsquo;s Attack Library This is just the top few attacks in Burp; the full list is comprehensive. The Burp list is a mix of attacks, vulnerabilities and missing security features - so not all of them describe exploitable issues - you\u0026rsquo;ll need to use your judgement on what to include.\nAttack selection To understand the attack surface, we need to think about which attacks from our attack library could be viable at each actor and at each message within the sequence diagram. For example, let\u0026rsquo;s look at the API.\nUsers will be accessing the API via a client browser or mobile app. They\u0026rsquo;ll submit their email address, new password and token in an HTTP POST. The API interacts with the IdP to update the users password, forwarding on the authentication data. From this analysis we know we need to think about the following attack categories at the API:\nSocial engineering attacks against staff Hardware attacks against the hosting infrastructure Operating system attacks Network layer attacks Application layer attacks For brevity, I\u0026rsquo;ll consider Social engineering, Hardware, OS and Network out of scope. If I was modeling the entire application, I would include those attack libaries.\nLet\u0026rsquo;s stay laser focussed on the API application layer and attacks relevant to a forgotten password mechanism. In addition to understanding the design, we also know the proposed technology stack from our discussions with the engineers (you did talk with them, right?), so can rule in/out stack-specific attack vectors.\nAttack Register Attack Modeling is all about putting our hacker\u0026rsquo;s hat on, dipping in to our libary of attacks, and contextualising those attacks for the system being analysed. Using our attack surface analysis, I\u0026rsquo;ve come up with the following list - can you spot any attacks I\u0026rsquo;ve missed? I\u0026rsquo;ve also included the relevant security control/s for each attack.\nRemember, these are for the API application layer only!\nAttack Control Enumerate users on email address submit CAPTCHA Capture token in URL Use POST and not GET to transmit tokens. Guess the token Use secure random UUID for tokens. Discover and use an old token Expire tokens after 15 minutes. Replay tokens Tokens expire after single use. Intercept cleartext password or token Use HTTPS. Set HSTS for strict transport security. Spam password resets to cause denial of service to users Password reset request does not invalidate old password. Limit password resets to 5 per day per user. SQL Injection Prepared statements. Unauthorised update to user password Enforce MFA via mobile app or SMS. (Emailed token is one factor already). SMS is not ideal but the alternative is a lengthy physical identity check. XSS HTML-encode output. Validate input. Steal credentials using untrusted domain Ensure only trusted domains and subdomains are origins in CORS policy, and that they are HTTPS. Exploit vulnerability in 3P dependency Use latest version of dependencies. Automate dependency updates. Exploit open redirect Ensure untrusted input is not used for the redirect after login function. Send forged link to user Ensure that only trusted input is used to construct link View leaked password or token Do not include password or token in logs Risk threshold: must implement above controls as a minimum before launch Exploit zero-day in parser EDR, logging and monitoring. Use leaked technical data to perform further attacks Debug mode off, generic error messages. Exploit session fixation Create a new session ID when the user logs in Prioritisation You\u0026rsquo;ll need contextual knowledge of the application and your specific business concerns to be accurate with prioritisation.\nInstead of a Risk column, I prefer a risk threshold - where all controls down to a selected row must be deployed. Anything below the threshold is a nice-to-have. This threshold line cuts the risk, impact and likelihood clutter from the Attack Register and makes it supremely understandable to engineering teams.\n\u0026ldquo;But what if the security engineer leaves the org, and we don\u0026rsquo;t know why it was above the line!\u0026rdquo; I hear you say. As mentioned previously, there are few novel attacks. Every attack in the Attack Register should be understood by any security engineer working on the Attack Model.\nBy using a risk threshold line instead of risk ratings, there\u0026rsquo;s no need for your engineering teams to look up your security policies and risk rating definitions. The work is already done.\nConclusion I hope this post clarifies what Attack Modeling is, as well as demonstrates how simple and effective it can be when deployed instead of Threat Modeling.\nGive it a go - your software engineers will thank you!\n-Gene\n","image":"/images/post/weapons_hu13647639473258561494.webp","permalink":"http://localhost:1313/post/attack-modeling/","tags":null,"title":"Attack modeling a forgotten password system"},{"categories":["attack modeling","ssdlc"],"contents":"STRIDE has not aged well\u0026hellip;\nI‚Äôve seen first-hand the thick PDFs and Excel files that my clients have had delivered to them by consultants. Those docs have about a million data flow diagrams, giant tables with columns spanning over multiple pages, and a bunch of unactionable data.\nSoftware engineers and hackers both move much faster than in the past. A list of high-level threats is not really useful when it comes to agile secure software development, because exploitable attack vectors are usually down in the weeds. It‚Äôs the detail that is missing from STRIDE reports, despite the huge amount of documentation.\nWhat can we do instead?\nAttack Modeling I‚Äôve been favouring Attack Modeling over Threat Modeling for some time now. It has only 3 steps:\nAnalyse attack surface for each component of the design Produce an Attack Register: a list of potential attacks against the exposed attack surface Produce a list of associated security controls to mitigate the attacks Attack modeling cuts the documentation significantly, and produces relevant, actionable data with none of the fluff.\nAnother bonus? The Attack Register can be used as a scope for the pentest!\n","image":"/images/post/threat_hu14943595895327339852.webp","permalink":"http://localhost:1313/post/threat-modeling-is-dead/","tags":null,"title":"Threat modeling is dead"},{"categories":["ssdlc","requirements"],"contents":"A few years ago I was brought in to help with security for a project at a large retailer in the UK. They were building out some web APIs that listed which products a customer might want to buy, based on previous orders they\u0026rsquo;d made. One of the first questions I asked was \u0026ldquo;How are we managing GDPR requirements?\u0026rdquo;. A look of concern came across everyone\u0026rsquo;s faces. The team had done a lot of work on setting up functional requirements and tests but didn\u0026rsquo;t know security and regulatory requirements were a thing. A couple weeks of rejigging the architecture and a few late nights later, the API was updated to include \u0026ldquo;right to be forgotten\u0026rdquo; functionality.\nThis was hard evidence that the \u0026ldquo;shift left\u0026rdquo; mantra that security folks have been banging on about has some merit. Those late nights could have been avoided if we included security in the requirements phase of software development. Yes, that includes Agile!\nThe goal here is to identify risks early and embed security requirements into the project from the very start.\nWhat happens in this phase? Identify security requirements Whether you use Scrum, Kanban, Waterfall, something else\u0026hellip; it doesn\u0026rsquo;t matter. They all have steps where security requirements can be injected early on in the software development lifecycle.\nExamples of security requirements:\nID Requirements R1 All requests to the API must be authenticated. Unauthenticated requests will be redirected to the login page. R2 Each API method must restrict access only to users who require access for their job role. R3 All traffic to and from the app must be over TLS 1.2. R4 There must be a mechanism to permanently delete PII data from the database. R5 Every login/logout event must be sent to the SIEM. It\u0026rsquo;s difficult to know if your security controls are working unless you test them. One thing I like to do is write my requirements so that they can be tested programmatically. For the requirements above, the associated tests might look like this:\nID Security Tests T1 Send an unauthenticated HTTP GET or POST request to the endpoint, and test for an \u0026lsquo;unauthenticated\u0026rsquo; response code. T2 Test access with each role to each API method, according to the access control table. T3 Test that only port 443 is listening, and then test the available TLS ciphers on 443. T4 Submit PII in to the fields that accept PII, perform the delete action, then search the database for the relevant PII to check if it\u0026rsquo;s still there. T5 Intitiate login and logout events, and then - using the SIEM\u0026rsquo;s API - checked in the SIEM Define success metrics If you can\u0026rsquo;t measure it, you can\u0026rsquo;t manage it\nIn addition to testing your security controls against the requirements, we also need to understand what success looks like. It helps to set quantifiable goals during this phase of the SSDLC, so everyone knows what to work towards.\nSome examples of success metrics:\nSAST tool shows zero vulnerabilities. DAST tool shows zero vulnerabilities. Penetration test results with all Critical, High and Medium issues remediated. App is onboarded to our bug bounty program. Compliance checklist: Ensure every requirement is tested and reviewed. Metrics like these will guide the team throughout development and act as criteria for release approval.\nOutputs By the end of this phase, you should have:\nA comprehensive list of security requirements and their associated tests (in text form) Clear metrics for success to track throughout the lifecycle. Buy-in from all stakeholders, ensuring security isn‚Äôt just a side task but part of the plan from day one. Skipping or rushing security requirements phase can turn a development sprint into a marathon of security fixes later on. Bake security in from the start!\n","image":"/images/post/regulations_hu3613724274242877405.webp","permalink":"http://localhost:1313/post/ssdlc-security-requirements/","tags":null,"title":"Security requirements"},{"categories":["zero-trust","identity","saas"],"contents":"Let me tell you a story\u0026hellip;\nA few years ago, I was working with a company that had a traditional approach to security. You know the type: a big firewall around the internal network, with the assumption that everything inside was safe and cozy. As long as you were ‚Äúin the network,‚Äù you were trusted. They had one big Active Directory (AD) domain and everything could access everything else.\nThat assumption came back to bite them. I was hired to do a pentest of some new APIs and I realised quickly that they were themselves talking to some other, older APIs that had been running the company‚Äôs core business for the past 20 years. Since I was inside the trust boundary, I could access the old APIs directly and bypass the authentication and authorisation enforced by the new APIs.\nThose old APIs were COBOL - which may give away that we‚Äôre talking about a bank - and I was able to use Cross-Site Request Forgery (CSRF) to have any of their customers transfer all funds out of their account and in to my account. That was the wake up call they needed.\nFast forward to today, where everyone is remote, apps live in the cloud, and every device has WiFi, it‚Äôs impossible to rely on the idea of a trusted internal network like that bank did. This is where Zero Trust comes in, and it‚Äôs been a game changer.\nIdentity is the new battleground Today‚Äôs networks are borderless. I mostly work from home (for now, ha), my coworkers are scattered across the globe, and everyone is accessing company apps on personal devices. This isn‚Äôt just a temporary thing; it‚Äôs the way work happens now. So, trying to create a trusted internal network is like putting up a fence around an empty field. The real action - and exploitation - is happening elsewhere.\nOne of the big shifts we‚Äôve all had to embrace is that it‚Äôs not about the network anymore; it‚Äôs about identity. Every time I want to access company resources, whether I‚Äôm on my phone, laptop, or some other device, I have to prove who I am. I log in through an Identity Provider (IdP), which makes sure I‚Äôm actually me.\nThere has been much hoo-ha about Identity being the new perimeter, but I don‚Äôt think that‚Äôs accurate. I don‚Äôt think there is a perimeter at all.\nThe future is Zero Trust Zero Trust flips the old security model on its head. Instead of assuming that everything inside the network is safe, it assumes nothing is safe no matter where it‚Äôs coming from. The idea is simple: never trust, always verify. It doesn‚Äôt matter if you‚Äôre sitting at a desk in the office or working from a caf√© in Changi Airport, you have to prove who you are every time.\nZero Trust also means there‚Äôs no such thing as a free pass after login. Just because I‚Äôve authenticated doesn‚Äôt mean I‚Äôm off the hook. Every single request to perform a restricted action has to be authenticated. That‚Äôs usually with an OAuth token or a session ID, which have become the new targets in red team exercises to get around MFA.\nIn the end, Zero Trust has changed the way I think about security. Instead of hunting for unpatched servers in external attack surface, it‚Äôs now the norm for offsec folks to go phishing for identities instead.\n","image":"/images/post/95heyk_hu15385600531519736350.webp","permalink":"http://localhost:1313/post/there-is-no-perimeter/","tags":null,"title":"There is no perimeter"},{"categories":["supply chain"],"contents":"The news of Hezbollah agents being targeted with exploding pagers and UHF radios was a shock to us all. Whilst this type of attack was always a possibility in theory, seeing it occur in practice was perhaps the most visually horrific instance of a supply chain attack in recent history.\nThis attack, along with the .mobi WHOIS debacle and the faulty Crowdstrike update, got me thinking quite a lot about supply chain attack surface. We all have these vulnerabilities, and there\u0026rsquo;s very little we can do in the way of mitigation.\nIts a matter of trust A supply chain attack is one where a target organisation or individual\u0026rsquo;s external suppliers are compromised with the intention to attack the target. Suppliers can come in many forms. For Hezbollah, it was the hardware manufacturers, but it could also be software dependencies, SaaS apps, internet infrastructure, service suppliers, or any other entity with a privileged connection to you or your business.\nYou trust suppliers of all forms to provide a product or service free from vulnerabilities. In some cases there are contracts to set limits on damages - I know I had to buy some hefty insurance before pentesting HFT firms in the past. In other cases there is no contract - trust is given for no apparent reason. Why would you have any reason to doubt the company supplying your office desks?\nThe risk of supply chain attacks should be included in any threat model where relevant. For most of us, although the likelihood of exploding devices is approaching zero, the impact is so high that we should perhaps pay more attention to the mundane suppliers. Those are the ones that will be the easiest for adversaries to compromise and remain unnoticed.\nSix attack vectors in supply chains 1. Compromised internet infrastructure One of the most mundane of all suppliers is the system of domain name registries, registrars, WHOIS, DNS, and other creaking tech that underpin all goings on on the internet. As a co-founder of an early domain name registrar I know first hand that some of the regisitration and update processes had very little in the way of authentication and authorisation. Some of this tech we still rely on today - WHOIS for example.\nWatchTowr recently found that they could register an outdated domain used by the .mobi registry to take over the TLD. When the .mobi TLD became available, the registry switched their WHOIS server from whois.dotmobiregistry.net to whois.mic.mobi. Their error was allowing their .net domain to lapse, which makes it registerable again by anyone - in this case, WatchTowr researchers. They found that many companies - including TLS Certificate Authorities (CAs) - relied on WHOIS data as an authoritative source.\nThe .mobi registry has learnt a hard lesson - don\u0026rsquo;t let important domain names lapse - ever. But really the victims of this attack are far removed from the regsitry. The victim is not the registry, or the CAs, or the businesses who relied on those CAs. The victims are the users of those encrypted websites, ordinary people like you and me.\nHow could we as users have mitigated the risk of this attack? Honestly there\u0026rsquo;s not much we can do. Its a matter of trust.\n2. Compromised SaaS app We all use so many SaaS apps in business that reliance on them has become a serious security concern. There are risks around data ownership, identity and access management, regulatory issues, vendor security standards, data loss, shadow IT, and incident response complexity. Using SaaS apps effectively widens your trust boundary to include those companys as well as your own.\nThis greatly increases attack surface for your business, whilst making security controls more difficult to deploy. One of my favourite preventative controls is pentesting and red teaming, but both of these can be very difficult to perform when SaaS apps are involved because of legal issues testing components that don\u0026rsquo;t belong to your business.\nA recent example of a vulnerable SaaS app that affected many users is the 2024 DropBox Sign issue. A malicious actor gained access to a DropBox configuration tool, and was able to exfiltrate emails and usernames, phone numbers, hashed passwords, and authentication information such as OAuth tokens and MFA data.\nThere are few mitigations against vulnerable SaaS apps. You could send out one of those third-party security questionnaires asking about which standards they comply with, what are their SSDLC practices and so on, but really those are quite pointless. I\u0026rsquo;ve seen too many vendors tell pork pies about their security practices in order to win business. The concensus, unfortunately, is that a SaaS app is secure \u0026ldquo;because everyone else is using it!\u0026rdquo;.\nYou could perhaps check if the SaaS app is signed up to a bug bounty program. At least that is verifiable publicly.\n3. Compromised hardware supplier This is the hot one right now due to what\u0026rsquo;s going on in Lebanon. There are however precedents for this type of attack, although not quite as spectacular. In 2022 it was revealed that Supermicro motherboards contained a rice-grain sized extra chip embedded in them, which connected out to China periodically for unknown reasons\u0026hellip; AWS and Apple have denied that any of the compromised hardware ever made it in to their cloud infrastructure.\nThe five-eyes governments of USA, UK, Canada, Australia and New Zealand have all banned Huawei devices from their critical national networks, for fear of the overbearing control the Chinese Communist Party (CCP) have over private companies in China.\nThis type of attack would require the manufacturer to be in cahoots with the attacker. A lesser but still effective entry point for an attacker would be to intercept shipment of devices and plant the dodgy hardware in the devices then. I expect this was the attack vector in Lebanon, though I would also expect the attack to be easily identified if one of the devices was opened up. You can\u0026rsquo;t hide explosives as well as hardware measured in nanometres.\nHardware supply chain attacks are partially the reason why governments procure Evaluated Products for their SECRET and TOP SECRET projects. Devices that have passed the Common Criteria have a higher level of assurance than uncertified devices. So if you\u0026rsquo;re a government, that\u0026rsquo;s your mitigation, although it sometimes takes so long for a device to be Evaluated that it\u0026rsquo;s hard to find bleeding edge tech in the list.\nOwing to the level of sophistication of this attack, the most likely targets are nation states, cloud suppliers and critical national infrastructure. If you did suspect some C4 in your mobile phone, I expect kevlar phone cases to become available shortly. The rest of us can probably keep this marked down as an accepted risk.\n4. Compromised software supplier There are two stand-out examples of a software supply chain issues recently.\nFirst, In July 2024, a faulty update from Endpoint Detection and Response (EDR) tool maker Crowdstrike caused many high profile outages across the world. Since this tool is deployed extensively by governments and high-security organisations, the impact was considerable. Personally, I couldn\u0026rsquo;t use my bank card or use the checkouts at my local grocery store for a few hours due to outages.\nAlthough this denial of service was unintentional, it\u0026rsquo;s still a risk and should be included in threat models. The outage didn\u0026rsquo;t affect me much - I just waited a couple hours to get my bread and milk. But some companies are seeking significant compensation, due to thing like trading systems and critical healthcare systems going down.\nSecond, the SolarWinds attack in 2020. SolarWinds is a very popular IT management tool that helps administer IT equipment in your company\u0026rsquo;s network. This was a bonafide attack - pinned on the Russian group Cozy Bear - who compromised SolarWinds build system to inject malware into software updates. In many cases the update was shipped automatically, giving Cozy Bear remote access to any of the targets. They stayed hidden for months within the target networks, exfiltrating any data they found useful.\nTargets for software supply chain attacks are much greater than for hardware. Since it\u0026rsquo;s much easier to inject malware in software than it is to compromise hardware, the scope is much wider. All businesses are targets for software supply chain attacks, and therefore it must be included in any threat model.\nThe mitigation to ensure a malicious actor has not tampered with a software update is to check the signatures of the update binaries. But for attacks where the supplier itself has been compromised, there\u0026rsquo;s not many good preventative security controls. Stopping a compromised software vendor comes down to detection and response. This is where EDR plays a vital role, and why the Crowdstrike issue was peak irony.\n5. Compromised software libraries I split this one away from software suppliers because libraries are imported in to your organisation\u0026rsquo;s own code, rather than downloaded as a separate product. This is an important difference, because libraries don\u0026rsquo;t have automatic updates. Software engineers usually pick a version of a third party library that works, and then stick with it until something breaks. This can, unfortunately, cause old and vulnerable versions to persist in your own products. It\u0026rsquo;s also easy for a malicious actor to slip some code in to open-source products in particular.\nThe best recent example of this is the Log4Shell issue in 2021, where a critical vulnerability had been shipping in the popular Log4j logging framework since 2013. Anyone running Log4j was vulnerable to remote code execution for 8 years! That included most of the cloud suppliers and other enterprise networks.\nThe mitigation for this type of vulnerability is to use a dependency checker like OWASP\u0026rsquo;s Dependency-Check or an equivalent commercial product. You could also run DAST tools to scan for any publicly disclosed vulnerabilities that might be accessible on listening ports or have some other exposure on the local machine.\n6. Compromised third-party employees I\u0026rsquo;ve done my fair share of contracts as a hired gun cyber security consultant in London, and I can say from experience that my background was almost never checked by the hiring company. After a scan of my CV, a single interview, and my signature on an NDA, I was given root access to many companys\u0026rsquo; most critical systems.\nContractors fill an important role as a supplier of services, where expertise is required but only for a specific project of time period. Many contractors need access to sensitive assets such as source code, network infrastructure, and physical spaces.\nThe mitigation for malicious contractors is the same as for your internal employees. Vet them! Background checks and reference checks are a good start, along with providing them with your company laptop rather than letting them use their own.\nSummary of best practices Threat model all systems at a business level and a technical level Install detection and response tools at the endpoint and in the browser Constantly monitor your external and internal attack surface Check if SaaS apps are signed up to a bug bounty program If you\u0026rsquo;re in government, check that hardware products have passed the Common Criteria The more paranoid amongst us could crack open hardware and take a look with a logic analyser Check the signatures for software binaries after download Deploy a dependency checker Consistently run SAST and DAST scans against your code and app Security code review Vet your contractors and supply them with a company laptop ","image":"/images/post/supply-chain_hu9234936349246850800.webp","permalink":"http://localhost:1313/post/2024-year-of-the-supply-chain-attack/","tags":null,"title":"2024: Year of the supply chain attack?"}]